#!/usr/bin/env ruby

require 'base64'
require 'open-uri'
require 'optparse'
require 'securerandom'

KEYS = ['AUTH_KEY', 'SECURE_AUTH_KEY', 'LOGGED_IN_KEY', 'NONCE_KEY', 'AUTH_SALT', 'SECURE_AUTH_SALT', 'LOGGED_IN_SALT', 'NONCE_SALT']

def secret_key(source, format)
  valid_options = {
    source: ['random', 'wp'],
    format: ['array', 'define', 'env'],
  }
  errors = []
  errors << "Invalid source option: #{source}" unless valid_options[:source].include?(source)
  errors << "Invalid format option: #{format}" unless valid_options[:format].include?(format)
  raise errors.join(', ') unless errors.empty?

  case source
  when 'random'
    secret_key_from_random(format)
  when 'wp'
    secret_key_from_wp(format)
  end
end

def secret_key_from_random(format)
  # Get secret key from SecureRandom
  random = Array.new(KEYS.size) { SecureRandom.base64(96) }
  secret_key = KEYS.zip(random)

  case format
  when 'define'
    secret_key.map {|pair|
      "define('#{pair[0]}',#{' ' * (16 - pair[0].size)} '#{pair[1]}');"
    }.join("\n")
  when 'array'
    secret_key.map {|pair|
      "$wp_config['#{pair[0].downcase}'] =#{' ' * (16 - pair[0].size)} '#{pair[1]}';"
    }.join("\n")
  when 'env'
    secret_key.map {|pair| pair.join('=') }.join(' ')
  end
end

def secret_key_from_wp(format)
  # Get secret key from WordPress.org secret key service
  secret_key_wp = open('https://api.wordpress.org/secret-key/1.1/salt/') {|f| f.read }

  case format
  when 'define'
    secret_key_wp
  when 'array'
    secret_key = []
    secret_key_wp.each_line do |line|
      s = line.split("'")
      secret_key << "$wp_config['#{s[1].downcase}'] =#{' ' * (16 - s[1].size)} '#{s[3]}';"
    end
    secret_key.join("\n")
  when 'env'
    secret_key = []
    secret_key_wp.each_line do |line|
      s = line.split("'")
      secret_key << "#{s[1]}='#{s[3]}'"
    end
    secret_key.join(' ')
  end
end

options = ARGV.getopts('', 'source:random', 'format:define')
puts secret_key(options['source'], options['format'])
